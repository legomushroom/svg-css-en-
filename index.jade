!!!5
html
	head
		meta(charset='UTF-8')
		title Document
		link(rel="stylesheet", type="text/css", href="css/main.css")
	body
		h1 SVG fitness or pushing icon fonts further
		//- img(src="i/cover.jpeg")
		img(src="i/cover_vectorized.png")
		p 	In this blog post we will build consistent,
			| modular and flexible vector icons system with both SVG and CSS.

		p SVG icons demo:
		<p data-height="268" data-theme-id="0" data-slug-hash="hKxwo" data-user="sol0mka" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/sol0mka/pen/hKxwo'>hKxwo</a> by Lego Mushroom (<a href='http://codepen.io/sol0mka'>@sol0mka</a>) on <a href='http://codepen.io'>CodePen</a></p>

		h2	The problem
		p A lot of great methodologies and principles risen up making our CSS more and more modular,
			| structured and flexible. But think about your icons.
			| Using raster graphics for icons means that they are not manageable in CSS.
			| What if we need to easily change a color of icon in hover/active/focus state?
			| For each icon state we need to add one more icon image.
			| What about size? For each icon's size we need to add yet another icon size image.
			| What about shape? Yep the same thing. Not very comfy, right? So we end up with bloated sprite and style sheets that are hard to support and scale.
		p The solution was found! Icon fonts. Yes, icon fonts are great.
		ul 
			h3 They are:
			li Plain text, that means they could be gzipped up to 95% size
			li Vector, means "retina" ready
			li One place sourced(think about it like a sprite sheet), that means less http requests
			li Font. Yep, you can easily change size/colors/shape and add shadow
			li Browser supported down to IE6

		ul 
			h3 Unfortunately, icon fonts have their own defects. Few reasons to push icon fonts further:
			li 
				b The Reason 1.
				p Font is browser's "achilles' heel" for pixel perfect designs.
					| The first issue is - font icons are not crisp. 
					| The second one is - every browser renders fonts in its own way so there is no hope to see consistent 
					a(href="http://www.smashingmagazine.com/2012/04/24/a-closer-look-at-font-rendering/") result across them
					| . In addition to that, every operating system handles font rendering in its 
					a(href="http://www.joelonsoftware.com/items/2007/06/12.html") own 
					a(href="http://en.wikipedia.org/wiki/Font_rasterization") fashion
					| . Take closer look at example below(clickable):
					br
					a(href="i/example2.png"): img(src="i/example2.png")
					p or
					a(href="i/example3.png"): img(src="i/example3.png")
					p or inconsistent blurry icons across browsers:
					a(href="i/example1.png"): img(src="i/example1.png")
					p 	These are examples I've found on the internet, in real life applications.
						| There are a lots of them out here. The last one was taken "as is" from popular icon font library.
						| I believe you have experienced what I'm talking about already. The way font icons could be unpredictably blurry is harmful.
						| The way they are inconsistently blurry harms the most. 
						| Wonder what designers think about it?
						br
						img(src="i/unacceptable.png")

			li 	
				b The Reason 2. 
				p
					| You can't have a multicolor icon.
					| Actually Apple is proposing multicolor fonts and adding an 
					a(href="http://en.wikipedia.org/wiki/Apple_Color_Emoji") Apple Color Emojji
					|  font to OSx Lion. But it might be a while before this becomes a reality.

			li 	
				b The Reason 3. 
				p
					| Effects we can add to it are limited to text-shadow property.
					| There is no way to add, for instance, a nice inset shadow here.

			li 
				b The Reason 4. 
				p
					| I've experienced problems with icon fonts.
					| Sometimes they were the reason of broken layout(!)
					| and sometimes of suddenly disappeared icons (it is a problem of ill-prepared font I believe).

		h2	The solution
		img(src="i/solution.png")
		p 	Despite huge popularity of vector in browser, its age and 
			a(href="http://caniuse.com/svg") browsers support
			|  we have a lack of SVG flexible icons systems, I've got a chance to fill in that gap.
			| Contemporary, SVG looks like good old guy with super powers.
			| It's time to throw him off the sofa and send him to the gym.
			| Solution I will share here with you based on SVG graphics.
			| Expanding benefits of icon fonts, it will add a power of SVG filters for adding effects
			| and solve font rendering problems.
			| It can be multicolor, it has XML like structure and it is also much and much smaller in size compared to fonts.
		
		h2	The bootstrap
		p Bootstrap is a pure HTML document with linked main.css file - a place where we will write styles for our icons.
		p 	Lets add a SVG document to a 
			i &lt;body&gt; 
			| tag. We will declare icons shapes here in 
			i &lt;defs&gt; 
			| section in way of 
			i clipPath
			| . SVG filters for effects will be placed here too.

			pre: code
				| &lt;!doctype html&gt;
				| &lt;html&gt;
				| 	&lt;head&gt;
				| 		&lt;meta charset=utf-8 /&gt;
				| 		&lt;link rel="stylesheet" href="main.css"&gt;
				| 	&lt;/head&gt;  
				| 	&lt;body&gt;
				| 
				| 
				| 		&lt;svg&gt;
				| 			&lt;defs&gt;          
				| 		 	&lt;!-- we will declare icons shapes and SVG filters for effects here --&gt; 
				| 			&lt;/defs&gt;  
				| 		&lt;/svg&gt;
				| 	&lt;/body&gt;
				| &lt;/html&gt;

		p Easy peasy. Pretty straightforward. You can download this bootstrap 
			a(href="https://github.com/sol0mka/svg-css-bootstrap") here
			|  or fork  
			a(href="http://codepen.io/sol0mka/pen/wBnsz") this pen
			|  to follow my step by step instructions.

		h2 Adding the first icon shape
		p So we need to get a shape of our first icon.
			| To achieve this we can use your favourite vector editor or just open SVG file
			| in text editor and take a code from it.
			| Lets add a &lt;clipPath&gt; tag and place icon's shape in it.
			| If you don't have a SVG file on hand, 
			a(href="https://s3-us-west-2.amazonaws.com/s.cdpn.io/6859/icon_1.svg") take mine
			| , please.

			pre: code
				| &lt;!doctype html&gt;
				| &lt;html&gt;
				| 	&lt;head&gt;
				| 		&lt;meta charset=utf-8 /&gt;
				| 		&lt;link rel="stylesheet" href="main.css"&gt;
				| 	&lt;/head&gt;  
				| 	&lt;body&gt;
				| 
				| 		&lt;svg&gt;
				| 			&lt;defs&gt;   
				|				&lt;clipPath id=&quot;heart-path&quot;&gt;
				|					&lt;path fill-rule=&quot;evenodd&quot; clip-rule=&quot;evenodd&quot; d=&quot;M256,512c0,0-256-144.
				|						938-256-311.694C0,29.22,240.62,10.145,256,192 c18.467-181.721,256-162.784,256,8.306C512,367.062,256,512,256,512z&quot;/&gt;       
				|				&lt;/clipPath&gt;
				| 			&lt;/defs&gt;  
				| 		&lt;/svg&gt;
				| 	&lt;/body&gt;
				| &lt;/html&gt;

		p Pay attention to id="heart-path" attribute on clipPath tag we will refer to icon's shape with it.

		h2 Adding the first icon
		p Lets add the first icon to our HTML. It consists of small SVG document with a rectangle in it:
			pre: code
				| &lt;svg class=&quot;icon is-heart&quot; viewBox=&quot;0 0 512 512&quot;&gt;
				| 	&lt;rect width=&quot;512&quot; height=&quot;512&quot; /&gt;
				| &lt;/svg&gt;

		p We are facing one of the drawbacks of this solution - an icon consist of two elements.
			| It is not a big deal for me because structure of all icons is the same so we can easily find/replace/remove it thru search on entire project.
			| If you use html partials for managing your html assets, it is not a problem at all.
			| Pay attention at number 512. This is a size of icon's bounds when it was drawn in vector editor.
			| So you can have different numbers.
			| Class 
			i .icon 
			| is a base icon class, 
			i .is-heart 
			| is shape modifier class of our icon.
		p Lets take a look at what we have got so far:
		<p data-height="268" data-theme-id="0" data-slug-hash="lIKzv" data-user="sol0mka" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/sol0mka/pen/lIKzv'>lIKzv</a> by Lego Mushroom (<a href='http://codepen.io/sol0mka'>@sol0mka</a>) on <a href='http://codepen.io'>CodePen</a></p>
		p Yep. Just a black square.

		h2 The last step: Adding CSS
		p Lets focus on CSS. In 
			i main.css 
			| we will declare classes: 
			i icon 
			| and it's modifier 
			i is-heart 
			| class

			pre: code
				| .icon{
				| 	width:32px;
				|	height:32px;
				|	fill:#ccc;
				| }

		p We've declared base icon size by standard width and height properties and color by fill property.

			pre: code
				| icon.is-heart rect{
				| 	clip-path:url('#heart-path');
				| }

		p Finally! We have an icon shape.
		<p data-height="268" data-theme-id="0" data-slug-hash="zDrbn" data-user="sol0mka" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/sol0mka/pen/zDrbn'>zDrbn</a> by Lego Mushroom (<a href='http://codepen.io/sol0mka'>@sol0mka</a>) on <a href='http://codepen.io'>CodePen</a></p>
		p 
			i clip-path 
			| is that property which forces browser to take an icon shape accordingly to 
			i #heart-path 
			| reference and renders our rectangle but not those parts that are extending out of the shape. 
		quot "The clipping path restricts the region to which paint can be applied." 
			a(href="http://www.w3.org/TR/SVG/masking.html") W3ะก Recommendation
			| .
		p The latest thing is to add different states for our icons:

			pre: code
				| .icon:hover{
				|   fill:#f5f5f5;
				|   cursor:pointer;
				| }

				| .icon:active{
				|   fill:#ccc;
				| }


				| .icon.is-check{
				|   fill:#FE4365;
				| }

		p That's it:
		<p data-height="268" data-theme-id="0" data-slug-hash="dtFni" data-user="sol0mka" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/sol0mka/pen/dtFni'>dtFni</a> by Lego Mushroom (<a href='http://codepen.io/sol0mka'>@sol0mka</a>) on <a href='http://codepen.io'>CodePen</a></p>
		p Sure it is simplified for the sake of clarity. In real world applications, you will add different colors and state colors thru different classes, but lets keep things simple for now.
		p To add one more icon we just need to:
		ol
			li Declare it's clipPath in 
				i &lt;defs&gt; 
				| section of our main SVG inline document. 
			li Add new icon class modifier.

		p Example with more icons:
		<p data-height="268" data-theme-id="0" data-slug-hash="HCDBx" data-user="sol0mka" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/sol0mka/pen/HCDBx'>HCDBx</a> by Lego Mushroom (<a href='http://codepen.io/sol0mka'>@sol0mka</a>) on <a href='http://codepen.io'>CodePen</a></p>
		p Notice that we can have not only path element as our clip path shape, but any SVG shape or sequence of shapes.

		h2 Adding effects
		p Let's add an inset shadow. For that we will use the power of SVG Filters.
			| For proper SVG filter effect we have to add one more element to our icon, so common icon will look like this:
			pre: code
				| &lt;svg class=&quot;heart-icon icon&quot; viewBox=&quot;0 0 512 512&quot;&gt;
				|   &lt;g&gt;      
				|     &lt;rect width=&quot;512&quot; height=&quot;512&quot; /&gt;
				|   &lt;/g&gt; 
				| &lt;/svg&gt;
		
		p Tag &lt;g&gt; is that element for filter overlay.
		p And add a filter declaration to &lt;defs&gt; section in our SVG source:

			pre: code
				| &lt;filter id='inset-shadow'&gt;
				br
				|	&lt;!-- Shadow offset --&gt;    
				|	&lt;feOffset      
				|		dx='0'     
				|		dy='0'    
				|	/&gt;
				br 
				|	&lt;!-- Shadow blur --&gt;
				|   &lt;feGaussianBlur
				| 		stdDeviation='20'
				| 		result='offset-blur'
				| 	/&gt;
				br
				|	&lt;!-- Invert drop shadow to make an inset shadow--&gt;
				|   &lt;feComposite
				| 		operator='out'
				| 		in='SourceGraphic'
				| 		in2='offset-blur'
				| 		result='inverse'
				| 	/&gt;
				br
				|	&lt;!-- color and transparency  --&gt;
				|	&lt;feFlood     
				|		flood-color='black'
				|		flood-opacity='.65'
				|		result='color'
				| 	/&gt; 
				br
				|	&lt;!-- Cut color inside shadow --&gt;
				|	&lt;feComposite
				|		operator='in'
				|		in='color'
				|		in2='inverse'
				|		result='shadow'
				|		/&gt;        
				| 	&lt;!-- Placing shadow over element --&gt;
				| 	&lt;feComposite 
				| 		operator='over' 
				| 		in='shadow'
				| 		in2='SourceGraphic'
				| 	/&gt; 
				| &lt;/filter&gt;

		p SVG filters are really powerful stuff and overview of them is out of bounds of this blog post.
			| You can read the specification 
			a(href="http://www.w3.org/TR/SVG/filters.html") here
			|  and checkout a simple 
			a(href="http://ie.microsoft.com/testdrive/graphics/hands-on-css3/hands-on_svg-filter-effects.htm") sandbox here
			| .
			| Filter declaration has an id='inset-shadow' for reference.
			pre: code
				| .icon.is-inset-shadow g{
				| 	filter:url('#inset-shadow')
				| }
		p Take a look at icons with inset shadow filter:
		<p data-height="268" data-theme-id="0" data-slug-hash="awJcj" data-user="sol0mka" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/sol0mka/pen/awJcj'>awJcj</a> by Lego Mushroom (<a href='http://codepen.io/sol0mka'>@sol0mka</a>) on <a href='http://codepen.io'>CodePen</a></p>

		p That's it!


		h2 Conclusion or What have we done?
		img(src="i/conclusion.png")
		p 	Lets look back with intention to analyse what have we done.
			| Although system may appear complex, it is DRY, flexible, consistent and simple.
			| We have one icon styles source and one SVG shapes source.

		ul
			p: b As a result we have got a system that:
			li: p is vector, so is "retina" ready
			li: p is easy color/size/effects CSS manageable 
			li: p is lightweight(play icon from my example weights 84 bytes not gzipped)
			li: p is text so can be gzipped up to 95%
			li: p is one http request source
			li: p is crisp and consistent rendered across browsers
			li: p brings the power of SVG filters
			li: p supported by all major modern browsers
			li: p has XML like structure and can be multicolor

		h2 	Perfomance
		p 	 All my tests show that SVG icons is about two times slower compared to .wof icon font in Chrome.
			| Time cost of paint operation is about 0.05 millisecond per icon or about 1.453ms for average 30 icons per user's view.
			| It is definetly not a prefomance hit.


			table(style="text-align:left")
				thead
					th Number of icons
					th Paint operantion time, ms
					th Paint operation time per 1 icon, ms
				tbody

					tr
						td 1
						td 0.059
						td 0.059

					tr
						td 30
						td 1.453
						td 0.04843

					tr
						td 90
						td 4.373
						td 0.04858

					tr
						td 180
						td 9.315
						td 0.05175

					tr
						td 3000
						td 32.131
						td 0.01071

		p
			| I actually had the courage to use this technique in production on relatively 
			| large project and didn't suspect any perfomance issues with it.

		h2 	Drawbacks
		ul
			li: p Trickery
			li: p Perfomance is two times slower compared to icon font.

		h2 	Thank you!



		p Looking forward on your questions and feedback in comments, thank you!

		ul
			p: b Browser support:
			li: p IE 9+
			li: p Mozilla 4+
			li: p Opera 11.6+
			li: p Safari 5.1+
			li: p Chrome 4+


	script(async, src="http://codepen.io/assets/embed/ei.js")

































